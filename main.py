import json
from datetime import date, datetime
from typing import Any

import telebot
from decouple import config
from telebot.types import Message, InputMediaPhoto
from loguru import logger
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

import botrequests

client = telebot.TeleBot(config('TOKEN'))
logger.add("debug.log", format="{time} {message}", level="DEBUG", encoding='utf-8')

users_list = []


def create_user(
        user_id: int,
        name: str
):
    user_dict = dict()
    user_dict['id'] = user_id
    user_dict['command'] = name
    user_dict['city'] = ''
    user_dict['max_hotel_num'] = 0
    user_dict['min_price'] = 0
    user_dict['max_price'] = 0
    user_dict['min_distance'] = 0
    user_dict['max_distance'] = 0
    user_dict['checkIn'] = ''
    user_dict['checkOut'] = ''
    users_list.append(user_dict)


def save_history(
        user_id: int,
        name: str
):
    current_data = datetime.now()
    text = "–í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞: {}:{}:{}\n" \
           "–î–∞—Ç–∞ –≤—ã–∑–æ–≤–∞: {}.{}.{}\n" \
           "–í—ã–∑–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {}\n".format(
            current_data.hour,
            current_data.minute,
            current_data.second,
            current_data.day,
            current_data.hour,
            current_data.year,
            name,)
    with open('history.json', 'r', encoding='utf-8') as file:
        dictionary = json.load(file)
    with open('history.json', 'w', encoding='utf-8') as file:
        try:
            dictionary[user_id] = dictionary[user_id] + text
        except KeyError:
            dictionary[user_id] = text
        json.dump(dictionary, file, ensure_ascii=False)
    logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n".format(user_id) + text)


@client.message_handler(commands=['start'])
def start(message: Message) -> None:
    client.send_message(
        message.chat.id,
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n'
        '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ –∏–∑ –ª—É—á—à–∏—Ö —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤ "Too Easy Travel". '
        '–ù–∞—à telegram-–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –æ—Ç–µ–ª–µ–º –≤—Å–µ–≥–æ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç.\n'
        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help'
    )


@client.message_handler(commands=['hello_world'])
def hello_world(message: Message) -> None:
    client.send_message(message.chat.id, 'Hello, world!üëã')


@client.message_handler(commands=['lowprice'])
def lowprice(message: Message) -> None:
    save_history(message.from_user.id, '/lowprice')
    create_user(message.from_user.id, 'low_price')
    mesg = client.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    client.register_next_step_handler(mesg, max_hotels_count_request)


@client.message_handler(commands=['highprice'])
def highprice(message: Message) -> None:
    save_history(message.from_user.id, '/highprice')
    create_user(message.from_user.id, 'high_price')
    mesg = client.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    client.register_next_step_handler(mesg, max_hotels_count_request)


@client.message_handler(commands=['bestdeal'])
def bestdeal(message: Message) -> None:
    save_history(message.from_user.id, '/bestdeal')
    create_user(message.from_user.id, 'best_deal')
    mesg = client.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    client.register_next_step_handler(mesg, max_hotels_count_request)


@client.message_handler(commands=['history'])
def history(message: Message) -> None:
    try:
        with open('history.json'.format(message.chat.id), 'r', encoding='utf-8') as file:
            user_history = json.load(file)[message.chat.id]
            if len(user_history) > 4096:
                client.send_message(
                    message.chat.id,
                    '–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å –Ω–µ–πüò•\n'
                    '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –ª–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –∑–∞–ø—Ä–æ—Å–æ–≤.'
                )
                abbreviated_user_history = user_history.split('–í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞')
                abbreviated_user_history = abbreviated_user_history[len(abbreviated_user_history) - 3:]
                text = ''
                for i_fragment in abbreviated_user_history:
                    text = text + '–í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞' + i_fragment
                client.send_message(message.chat.id, text)
            else:
                client.send_message(message.chat.id, user_history, disable_web_page_preview=True)
    except KeyError:
        client.send_message(
            message.chat.id,
            '–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞üòî\n'
            '–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å)'
        )
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /history\n'.format(message.chat.id))


@client.message_handler(commands=['help'])
def help_command(message: Message) -> None:
    text = '–í–æ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ–µ—Ç –Ω–∞—à –±–æ—Ç:\n' \
           '/lowprice - –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π\n' \
           '/highprice - –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π\n' \
           '/bestdeal - –≤—ã–≤–æ–¥–∏—Ç —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤–∞—Å –ø–æ —Ü–µ–Ω–µ ' \
           '–∏ –æ—Ç–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ –æ—Ç–µ–ª–∏\n' \
           '/history - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤'
    client.send_message(message.chat.id, text)
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /help\n'.format(message.chat.id))


@client.message_handler(content_types=['text'])
def get_text(message: Message) -> None:
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        client.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!üëã')
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {}\n'.format(message.chat.id, message.text))


def max_hotels_count_request(message: Message) -> None:
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {}\n'.format(message.chat.id, message.text))
    for i_user in users_list:
        if message.from_user.id == i_user['id']:
            if message.text.isalpha() is True or ''.join(message.text.split(' ')).isalpha():
                i_user['city'] = message.text
                if i_user['command'] == 'best_deal':
                    mesg = client.send_message(
                        message.chat.id,
                        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∏–∞–ø–æ–∑–æ–Ω —Ü–µ–Ω –≤ —Ä—É–±–ª—è—Ö(–ø—Ä–∏–º–µ—Ä: 5000-10000)'
                    )
                    client.register_next_step_handler(mesg, price_range_request)
                else:
                    mesg = client.send_message(
                        message.chat.id,
                        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, '
                        '–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –≤—ã–≤–µ—Å—Ç–∏ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ–≥–æ 1 —Ü–∏—Ñ—Ä—É, –ø—Ä–∏–º–µ—Ä: 3)'
                    )
                    client.register_next_step_handler(mesg, check_in_request)
            else:
                mesg = client.send_message(
                    message.chat.id,
                    '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –Ω–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. '
                    '–ó–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞'
                )
                client.register_next_step_handler(mesg, max_hotels_count_request)


def price_range_request(message: Message) -> None:
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {}\n'.format(message.chat.id, message.text))
    for i_user in users_list:
        if message.from_user.id == i_user['id']:
            try:
                lst = message.text.split('-')
                i_user['min_price'] = int(lst[0])
                i_user['max_price'] = int(lst[1])
                mesg = client.send_message(
                    message.chat.id,
                    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∏–∞–ø–æ–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–ø—Ä–∏–º–µ—Ä: 0-10)'
                )
                client.register_next_step_handler(mesg, distance_range_request)
            except:
                mesg = client.send_message(
                    message.chat.id,
                    '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
                )
                logger.error(
                    '–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ price_range_request\n'
                    '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}'.format(
                        message.text, message.chat.id))
                client.register_next_step_handler(mesg, price_range_request)


def distance_range_request(message: Message) -> None:
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {}\n'.format(message.chat.id, message.text))
    for i_user in users_list:
        if message.from_user.id == i_user['id']:
            try:
                lst = message.text.split('-')
                i_user['min_distance'] = int(lst[0])
                i_user['max_distance'] = int(lst[1])
                i_user['command'] = False
                mesg = client.send_message(
                    message.chat.id,
                    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, '
                    '–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –≤—ã–≤–µ—Å—Ç–∏ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ–≥–æ 1 —Ü–∏—Ñ—Ä—É, –ø—Ä–∏–º–µ—Ä: 3)'
                )
                client.register_next_step_handler(mesg, check_in_request)
            except:
                mesg = client.send_message(
                    message.chat.id,
                    '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
                )
                logger.error(
                    '–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ distance_range_request\n'
                    '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}'.format(
                        message.text, message.chat.id))
                client.register_next_step_handler(mesg, distance_range_request)


def check_in_request(message: Message) -> None:
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {}\n'.format(message.chat.id, message.text))
    for i_user in users_list:
        if message.from_user.id == i_user['id']:
            try:
                i_user['max_hotel_num'] = int(message.text)
                calendar, step = DetailedTelegramCalendar(locale='ru', min_date=date.today()).build()
                client.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ ({LSTEP[step]})', reply_markup=calendar)
            except:
                mesg = client.send_message(
                    message.chat.id,
                    '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
                )
                logger.error(
                    '–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_in_request\n'
                    '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}'.format(
                        message.text, message.chat.id))
                client.register_next_step_handler(mesg, check_in_request)


@client.callback_query_handler(func=DetailedTelegramCalendar.func())
def check_out_request(c: Any) -> None:
    result, key, step = DetailedTelegramCalendar(min_date=date.today()).process(c.data)
    if not result and key:
        client.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ {LSTEP[step]}", c.message.chat.id, c.message.message_id,
                                 reply_markup=key)
    else:
        client.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}", c.message.chat.id, c.message.message_id)
        logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {}\n'.format(c.message.chat.id, result))
        for i_user in users_list:
            if c.message.chat.id == i_user['id']:
                if i_user['checkIn'] == '':
                    calendar, step = DetailedTelegramCalendar(
                        locale='ru',
                        calendar_id=1,
                        min_date=date.today()
                    ).build()
                    client.send_message(c.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞', reply_markup=calendar)
                    i_user['checkIn'] = result


@client.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
def max_hotels_request(c: Any) -> None:
    result, key, step = DetailedTelegramCalendar(calendar_id=1, min_date=date.today()).process(c.data)
    if not result and key:
        client.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞", c.message.chat.id, c.message.message_id,
                                 reply_markup=key)
    else:
        client.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}", c.message.chat.id, c.message.message_id)
        logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {}\n'.format(c.message.chat.id, result))
        for i_user in users_list:
            if c.message.chat.id == i_user['id']:
                i_user['checkOut'] = result
                mesg = client.send_message(c.message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (0 –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ)?')
                client.register_next_step_handler(mesg, get_result)


def get_result(message: Message) -> None:
    logger.debug('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {}\n'.format(message.chat.id, message.text))
    for i_user in users_list:
        if message.from_user.id == i_user['id']:
            try:
                photo_count = int(message.text)
            except:
                logger.error(
                    '–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_result\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}'.format(
                        message.text, message.chat.id))
                mesg = client.send_message(message.chat.id,
                                           '–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
                client.register_next_step_handler(mesg, get_result)
                break
            client.send_message(message.chat.id, '–ò—â–µ–º –æ—Ç–µ–ª–∏...')
            if i_user['command'] == 'low_price':
                hotels_list = botrequests.lowprice.get_result(i_user['city'], i_user['max_hotel_num'],
                                                              i_user['checkIn'], i_user['checkOut'])
            elif i_user['command'] == 'high_price':
                hotels_list = botrequests.highprice.get_result(i_user['city'], i_user['max_hotel_num'],
                                                               i_user['checkIn'], i_user['checkOut'])
            else:
                hotels_list = botrequests.bestdeal.get_result(i_user['city'], i_user['max_hotel_num'],
                                                              i_user['min_price'], i_user['max_price'],
                                                              i_user['min_distance'], i_user['max_distance'],
                                                              i_user['checkIn'], i_user['checkOut'])
            if len(hotels_list) == 0:
                client.send_message(message.chat.id, '–ù–µ –Ω–∞—à–ª–æ—Å—å –æ—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É')

            for i_hotel in hotels_list:
                try:
                    adress = i_hotel['address']['streetAddress']
                except KeyError:
                    adress = '-'
                try:
                    rating = i_hotel['guestReviews']['rating']
                except KeyError:
                    rating = '-'
                if not i_user['command']:
                    price = i_hotel[list(i_hotel.keys())[0]]['price']
                    name = i_hotel[list(i_hotel.keys())[0]]['name']
                    id = i_hotel[list(i_hotel.keys())[0]]['id']
                else:
                    price = str(i_hotel['ratePlan']['price']['exactCurrent']) + 'RUB'
                    name = i_hotel['name']
                    id = i_hotel['id']
                text = "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {}\n" \
                       "–ê–¥—Ä–µ—Å—Å –æ—Ç–µ–ª—è: {}\n" \
                       "–†–µ–π—Ç–Ω–≥ –æ—Ç–µ–ª—è: {}\n" \
                       "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–µ–ª—å: https://ru.hotels.com/{}\n" \
                       "–¶–µ–Ω–∞: {}\n".format(name, adress, rating, id, price)
                client.send_message(message.chat.id, text, disable_web_page_preview=True)
                with open('history.json', 'r', encoding='utf-8') as file:
                    dictionary = json.load(file)
                with open('history.json', 'w', encoding='utf-8') as file:
                    dictionary[str(message.chat.id)] = dictionary[str(message.chat.id)] + text + '*' * 30 + '\n'
                    json.dump(dictionary, file, ensure_ascii=False)
                logger.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\n".format(message.chat.id) + text)
                try:
                    if int(message.text) != 0:
                        photos = botrequests.get_photo.get_photo(i_hotel['id'], int(message.text))
                        if len(photos) != 0:
                            photos_list = []
                            for i_photo in photos:
                                photo_url = i_photo['baseUrl'].split('_{size}')
                                photos_list.append(InputMediaPhoto(''.join(photo_url)))
                            client.send_media_group(message.chat.id, photos_list)
                        else:
                            client.send_message(message.chat.id, '–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–µ–ª—è –Ω–µ –Ω–∞—à–ª–æ—Å—å —Ñ–æ—Ç–æ.')
                except:
                    client.send_message(message.chat.id, '–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–µ–ª—è –Ω–µ –Ω–∞—à–ª–æ—Å—å —Ñ–æ—Ç–æ.')
            users_list.pop(users_list.index(i_user))


client.polling(none_stop=True, interval=0)
